{"version":3,"sources":["components/CourseJS.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["CourseJS","props","courseName","match","params","coursename","useState","courses","setCourses","vid","setVid","title","setTit","counter","setCounter","playlistId","useEffect","fetch","then","res","json","data","result","items","map","item","snippet","contentDetails","videoId","renderSVideo","className","src","width","height","allowFullScreen","index","key","to","onClick","Home","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oRAyFeA,EAtFE,SAAAC,GACb,IAAMC,EAAaD,EAAME,MAAMC,OAAOC,WADhB,EAEQC,mBAAS,IAFjB,mBAEfC,EAFe,KAENC,EAFM,OAGAF,mBAAS,IAHT,mBAGfG,EAHe,KAGVC,EAHU,OAIEJ,mBAAS,IAJX,mBAIfK,EAJe,KAIRC,EAJQ,OAKQN,mBAAS,IALjB,mBAKfO,EALe,KAKNC,EALM,KAMlBC,EAAa,GAEbA,EADe,YAAfb,EACa,qCAGA,qCAEjBc,qBAAU,WACNC,MAAM,iHAAD,OAAkHF,EAAlH,iDACAG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAMC,EAASD,EAAKE,MAAMC,KAAI,SAACC,GAC3B,MAAO,CAAEd,MAAOc,EAAKC,QAAQf,MAAOF,IAAKgB,EAAKE,eAAeC,YAEjEpB,EAAWc,GACXZ,EAAOY,EAAO,GAAGb,KACjBG,EAAOU,EAAO,GAAGX,YAE1B,CAACI,IAEJ,IAUMc,EAAe,WACjB,OACI,6BACI,yBAAKC,UAAU,2CACX,4BAAQnB,MAAM,QAAQmB,UAAU,wBAAwBC,IAAK,iCAAmCtB,EAAM,SAAUuB,MAAO,IAAKC,OAAQ,OAExI,wBAAIH,UAAU,gBAAgBnB,KAI1C,OACI,6BACI,yBAAKmB,UAAU,aACX,4BAAK5B,GArBT,6BACI,yBAAK4B,UAAU,4CACX,4BAAQnB,MAAM,QAAQmB,UAAU,wBAAwBC,IAAK,iCAAmCtB,EAAM,SAAUuB,MAAO,IAAKC,OAAQ,IAAKC,iBAAe,KAE5J,wBAAIJ,UAAU,qBAAqBnB,IAmBnC,yBAAKmB,UAAU,OACX,yBAAKA,UAAU,SACVD,KAEL,yBAAKC,UAAU,SACVD,MAGT,yBAAKC,UAAU,OACX,yBAAKA,UAAU,SACVD,KAEL,yBAAKC,UAAU,SACVD,MAGT,wBAAIC,UAAU,0BACTvB,EAAQiB,KAAI,SAACC,EAAMU,GAAP,OACT,kBAAC,IAAD,CAAMC,IAAKX,EAAKhB,IAAKqB,UAAWjB,IAAYsB,EAAQ,yBAA2B,kBAAmBE,GAAG,IAAIC,QAAS,WAC9G5B,EAAOe,EAAKhB,KACZG,EAAOa,EAAKd,OACZG,EAAWqB,KACXV,EAAKd,cCtDlB4B,EAnBF,SAAAtC,GACT,OACI,6BACI,kBAAC,IAAD,CAAMoC,GAAG,YACL,iDAEJ,kBAAC,IAAD,CAAMA,GAAG,WACL,kDCWDG,MAdf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,eAAeE,UAAW3C,QCD5B4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5C,MACvB,2DCZN6C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03259bc6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CourseJS = props => {\r\n    const courseName = props.match.params.coursename;\r\n    const [courses, setCourses] = useState([]);\r\n    const [vid, setVid] = useState(\"\");\r\n    const [title, setTit] = useState(\"\");\r\n    const [counter, setCounter] = useState(\"\");\r\n    let playlistId = \"\";\r\n    if (courseName === \"reactjs\") {\r\n        playlistId = \"PLB97yPrFwo5hpOay4v2nnDuUCZQMwyQzF\"\r\n    }\r\n    else {\r\n        playlistId = \"PLB97yPrFwo5gh4WP-VtwsVJbebyHbxNk6\"\r\n    }\r\n    useEffect(() => {\r\n        fetch(`https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails%2C%20snippet&maxResults=10&playlistId=${playlistId}&key=AIzaSyCg67FTfV0XNZImDZRJEPgJdm3OcePFcYM`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const result = data.items.map((item) => {\r\n                    return { title: item.snippet.title, vid: item.contentDetails.videoId }\r\n                })\r\n                setCourses(result);\r\n                setVid(result[0].vid);\r\n                setTit(result[0].title);\r\n            })\r\n    }, [playlistId])\r\n\r\n    const renderBVideo = () => {\r\n        return (\r\n            <div>\r\n                <div className=\"embed-responsive embed-responsive-16by9 \">\r\n                    <iframe title=\"video\" className=\"embed-responsive-item\" src={\"https://www.youtube.com/embed/\" + vid + \"?rel=0\"} width={800} height={400} allowFullScreen></iframe>\r\n                </div>\r\n                <h4 className=\"text-justify pb-5\">{title}</h4>\r\n            </div>\r\n        )\r\n    }\r\n    const renderSVideo = () => {\r\n        return (\r\n            <div>\r\n                <div className=\"embed-responsive embed-responsive-16by9\">\r\n                    <iframe title=\"video\" className=\"embed-responsive-item\" src={\"https://www.youtube.com/embed/\" + vid + \"?rel=0\"} width={400} height={200} ></iframe>\r\n                </div>\r\n                <h6 className=\"text-justify\">{title}</h6>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                <h1>{courseName}</h1>\r\n                {renderBVideo()}\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        {renderSVideo()}\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        {renderSVideo()}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        {renderSVideo()}\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        {renderSVideo()}\r\n                    </div>\r\n                </div>\r\n                <ul className=\"list-group w-75 m-auto\">\r\n                    {courses.map((item, index) => (\r\n                        <Link key={item.vid} className={counter === index ? \"list-group-item active\" : \"list-group-item\"} to=\"#\" onClick={() => {\r\n                            setVid(item.vid)\r\n                            setTit(item.title)\r\n                            setCounter(index)\r\n                        }}>{item.title}\r\n                        </Link>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nCourseJS.propTypes = {\r\n\r\n}\r\n\r\nexport default CourseJS\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Home = props => {\r\n    return (\r\n        <div>\r\n            <Link to=\"/reactjs\">\r\n                <h1>React JS Courses</h1>\r\n            </Link>\r\n            <Link to=\"/nodejs\">\r\n                <h1>Node JS Courses</h1>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nHome.propTypes = {\r\n\r\n}\r\n\r\n\r\n\r\nexport default Home\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport CourseJS from './components/CourseJS';\nimport Home from './components/Home';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/:coursename\" component={CourseJS} />\n\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}